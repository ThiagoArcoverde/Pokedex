@page "/"
@using Pokedex.Models;
@using Pokedex.Util;
@using System.Text.Json
@inject PokeClient client;
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="../Pages/Index.razor.css" />

<div class="navbar">
    <Navbar />
</div>
<div class="container">
    <div class="region-selector">
        <div class="label-select">
            <label for="regions">Region: </label>
            <select name="regions" id="regions" class="label-select-box" @bind="selectedValue">
                <option>Kanto</option>
                <option>Johto</option>
                <option>Hoenn</option>
                <option>Sinnoh</option>
                <option>Unova</option>
                <option>Kalos</option>
                <option>Alola</option>
                <option>Galar</option>
                <option>Paldea</option>
            </select>
        </div>
        <button class="region-button" @onclick="SetPokemonByRegion" disabled="@IsButtonDisabled">Select</button>
    </div>
    <div class="pokemon-row">
        @foreach (Pokemon pokemon in PokemonList)
        {
            <a href="/pokemon/@pokemon.id">
                <div class="pokemon-card">
                    <img src="@pokemon.sprites.front_default" alt="Pokemon sprite">
                    <h4 class="pokemon-name">@pokemon.name</h4>
                    <div class="type-row">
                        @foreach (var type in pokemon.types)
                        {
                            <span class="type-badge" style="background-color: @PokeColor.GetTypeColor(@type.type.name)">@type.type.name </span>
                        }
                    </div>
                </div>
            </a>
        }
    </div>
</div>

<style>
    body {
        background-color: #4b4b4b;
    }
</style>

@code {
    protected bool IsButtonDisabled { get; set; } = false;
    private string? selectedValue { get; set; } = "Kanto";
    private Region Region { get; set; } = new Region();
    private List<Pokemon> PokemonList = new List<Pokemon>();

    protected override async Task OnInitializedAsync()
    {
        IsButtonDisabled = true;
        await PopulateRegion();
        SetPokemonByRegion();
        StateHasChanged();
        IsButtonDisabled = false;
    }

    private void SaveRegionToLocal()
    {
        JSRuntime.InvokeVoidAsync("localStorage.setItem", "regionData", JsonSerializer.Serialize(Region));
    }

    private async Task<Region?> LoadRegionFromLocal()
    {
        var storedRegion = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "regionData");
        if(storedRegion != null)
            return JsonSerializer.Deserialize<Region>(storedRegion);
        return null;
    }

    protected void SetPokemonByRegion()
    {
        IsButtonDisabled = true;
        switch (selectedValue)
        {
            case "Kanto":
                PokemonList = Region.Kanto;
                break;
            case "Johto":
                PokemonList = Region.Johto;
                break;
            case "Hoenn":
                PokemonList = Region.Hoenn;
                break;
            case "Sinnoh":
                PokemonList = Region.Sinnoh;
                break;
            case "Unova":
                PokemonList = Region.Unova;
                break;
            case "Kalos":
                PokemonList = Region.Kalos;
                break;
            case "Alola":
                PokemonList = Region.Alola;
                break;
            case "Galar":
                PokemonList = Region.Galar;
                break;
            case "Paldea":
                PokemonList = Region.Paldea;
                break;
        };
        IsButtonDisabled = false;
    }

    private async Task PopulateRegion()
    {
        var localRegion = await LoadRegionFromLocal();
        if(localRegion != null)
        {
            Region = localRegion;
        }
        else
        {
            List<Task<List<Pokemon>>> regionTasks = new List<Task<List<Pokemon>>>
            {
                client.GetKantoPokemon(),
                client.GetJohtoPokemon(),
                client.GetHoennPokemon(),
                client.GetSinnohPokemon(),
                client.GetUnovaPokemon(),
                client.GetKalosPokemon(),
                client.GetAlolaPokemon(),
                client.GetGalarPokemon(),
                client.GetPaldeaPokemon()
            };
            await Task.WhenAll(regionTasks);

            Region.Kanto = regionTasks[0].Result;
            Region.Johto = regionTasks[1].Result;
            Region.Hoenn = regionTasks[2].Result;
            Region.Sinnoh = regionTasks[3].Result;
            Region.Unova = regionTasks[4].Result;
            Region.Kalos = regionTasks[5].Result;
            Region.Alola = regionTasks[6].Result;
            Region.Galar = regionTasks[7].Result;
            Region.Paldea = regionTasks[8].Result;
            SaveRegionToLocal();
        }
    }

    private void HandleSelectionChange(ChangeEventArgs e) 
    {
        if(e != null)
            selectedValue = e.Value?.ToString();
    }
}